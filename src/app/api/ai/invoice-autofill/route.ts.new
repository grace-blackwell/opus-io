import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(req: NextRequest) {
  try {
    // Check if OpenAI API key is configured
    if (!process.env.OPENAI_API_KEY) {
      console.error('OpenAI API key is not configured');
      return NextResponse.json(
        { error: 'OpenAI API key is not configured. Please add it to your .env.local file.' },
        { status: 500 }
      );
    }

    // Parse request body
    let text;
    try {
      const body = await req.json();
      text = body.text;
    } catch (error) {
      console.error('Error parsing request body:', error);
      return NextResponse.json(
        { error: 'Invalid request body. Expected JSON with a text field.' },
        { status: 400 }
      );
    }

    // Validate text input
    if (!text || typeof text !== 'string') {
      return NextResponse.json(
        { error: 'Text is required and must be a string' },
        { status: 400 }
      );
    }

    // Call OpenAI API to extract invoice information
    try {
      // Try to use GPT-4o first, but fall back to GPT-3.5-turbo if needed
      const model = process.env.OPENAI_MODEL || "gpt-3.5-turbo";
      console.log(`Using OpenAI model: ${model}`);
      
      const response = await openai.chat.completions.create({
        model: model,
        messages: [
          {
            role: "system",
            content: `You are an AI assistant that extracts invoice information from text. 
            Extract the following information in JSON format:
            - Customer information (name, email, phone, address, city, state, zip)
            - Invoice items (product name, description, quantity, rate)
            - Any additional notes or terms
            
            Format the response as a valid JSON object with the following structure:
            {
              "customer": {
                "name": "",
                "email": "",
                "phone": "",
                "address": "",
                "city": "",
                "state": "",
                "zip": "",
                "country": ""
              },
              "items": [
                {
                  "product": "",
                  "description": "",
                  "quantity": "",
                  "rate": ""
                }
              ],
              "notes": "",
              "terms": ""
            }
            
            If any field is not found in the text, leave it as an empty string. For items, include as many as you can identify.`
          },
          {
            role: "user",
            content: text
          }
        ],
        response_format: { type: "json_object" }
      });

      // Extract the JSON response
      const content = response.choices[0]?.message?.content;
      
      if (!content) {
        return NextResponse.json(
          { error: 'AI did not return any content. Please try again with more detailed text.' },
          { status: 500 }
        );
      }

      // Parse the JSON response
      try {
        const parsedContent = JSON.parse(content);
        return NextResponse.json(parsedContent);
      } catch (error) {
        console.error('Error parsing JSON response from OpenAI:', error);
        return NextResponse.json(
          { error: 'Failed to parse AI response. The AI returned invalid JSON.' },
          { status: 500 }
        );
      }
    } catch (error: any) {
      console.error('OpenAI API error:', error);
      
      // Handle specific OpenAI API errors
      if (error.status === 401) {
        return NextResponse.json(
          { error: 'Invalid OpenAI API key. Please check your API key configuration.' },
          { status: 500 }
        );
      } else if (error.status === 429) {
        return NextResponse.json(
          { error: 'OpenAI API rate limit exceeded. Please try again later.' },
          { status: 429 }
        );
      } else {
        return NextResponse.json(
          { error: `OpenAI API error: ${error.message || 'Unknown error'}` },
          { status: 500 }
        );
      }
    }
  } catch (error: any) {
    console.error('Unexpected error processing invoice text:', error);
    return NextResponse.json(
      { error: `Failed to process invoice text: ${error.message || 'Unknown error'}` },
      { status: 500 }
    );
  }
}